// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  email String @unique
  name String
  hashedPassword String
  salt String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trips Trip[] @relation("TripCreator")
  participants Participant[]
}

model Trip{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  creator User @relation("TripCreator", fields: [creatorId], references: [id])
  destination String
  creatorId String
  participants Participant[]
}

model Participant{
  id String @id @default(uuid())
  trip Trip @relation(fields: [tripId], references: [id])
  tripId String
  user User @relation(fields: [userId], references: [id])
  userId String
  status Status @default(PENDING)
  locations Location[]
}

model Location {
  id String @id @default(uuid())
  participantId String
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  latitude Float
  longitude Float
  accuracy Float?
  heading Float?
  speed Float?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

